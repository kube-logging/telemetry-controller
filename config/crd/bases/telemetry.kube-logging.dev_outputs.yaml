---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.17.3
  name: outputs.telemetry.kube-logging.dev
spec:
  group: telemetry.kube-logging.dev
  names:
    categories:
    - telemetry-all
    kind: Output
    listKind: OutputList
    plural: outputs
    singular: output
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.tenant
      name: Tenant
      type: string
    - jsonPath: .status.state
      name: State
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Output is the Schema for the outputs API
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: OutputSpec defines the desired state of Output
            properties:
              authentication:
                description: Output Authentication configuration.
                properties:
                  basicauth:
                    properties:
                      passwordField:
                        type: string
                      secretRef:
                        description: |-
                          SecretReference represents a Secret Reference. It has enough information to retrieve secret
                          in any namespace
                        properties:
                          name:
                            description: name is unique within a namespace to reference
                              a secret resource.
                            type: string
                          namespace:
                            description: namespace defines the space within which
                              the secret name must be unique.
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      usernameField:
                        type: string
                    type: object
                  bearerauth:
                    properties:
                      secretRef:
                        description: |-
                          SecretReference represents a Secret Reference. It has enough information to retrieve secret
                          in any namespace
                        properties:
                          name:
                            description: name is unique within a namespace to reference
                              a secret resource.
                            type: string
                          namespace:
                            description: namespace defines the space within which
                              the secret name must be unique.
                            type: string
                        type: object
                        x-kubernetes-map-type: atomic
                      tokenField:
                        type: string
                    type: object
                type: object
              batch:
                description: Batch processor configuration.
                properties:
                  metadata_cardinality_limit:
                    description: |-
                      MetadataCardinalityLimit indicates the maximum number of
                      batcher instances that will be created through a distinct
                      combination of MetadataKeys.
                    format: int32
                    type: integer
                  metadata_keys:
                    description: |-
                      MetadataKeys is a list of client.Metadata keys that will be
                      used to form distinct batchers.  If this setting is empty,
                      a single batcher instance will be used.  When this setting
                      is not empty, one batcher will be used per distinct
                      combination of values for the listed metadata keys.

                      Empty value and unset metadata are treated as distinct cases.

                      Entries are case-insensitive.  Duplicated entries will
                      trigger a validation error.
                    items:
                      type: string
                    type: array
                  send_batch_max_size:
                    description: |-
                      SendBatchMaxSize is the maximum size of a batch. It must be larger than SendBatchSize.
                      Larger batches are split into smaller units.
                      Default value is 0, that means no maximum size.
                    format: int32
                    type: integer
                  send_batch_size:
                    description: |-
                      SendBatchSize is the size of a batch which after hit, will trigger it to be sent.
                      When this is set to zero, the batch size is ignored and data will be sent immediately
                      subject to only send_batch_max_size.
                    format: int32
                    type: integer
                  timeout:
                    description: |-
                      Timeout sets the time after which a batch will be sent regardless of size.
                      When this is set to zero, batched data will be sent immediately.
                    format: duration
                    type: string
                type: object
              fluentforward:
                description: Configuration for the fluentforward exporter.
                properties:
                  compress_gzip:
                    description: CompressGzip enables gzip compression for the payload.
                    type: boolean
                  connection_timeout:
                    description: Connection Timeout parameter configures `net.Dialer`.
                    format: duration
                    type: string
                  default_labels_enabled:
                    additionalProperties:
                      type: boolean
                    description: DefaultLabelsEnabled is a map of default attributes
                      to be added to each log record.
                    type: object
                  endpoint:
                    description: Endpoint to send logs to.
                    properties:
                      tcp_addr:
                        description: TCPAddr is the address of the server to connect
                          to.
                        type: string
                      validate_tcp_resolution:
                        description: |-
                          Controls whether to validate the tcp address.
                          Turning this ON may result in the collector failing to start if it came up faster then the endpoint.
                          default is false.
                        type: boolean
                    required:
                    - tcp_addr
                    type: object
                  kubernetes_metadata:
                    properties:
                      include_pod_labels:
                        type: boolean
                      key:
                        type: string
                    required:
                    - include_pod_labels
                    - key
                    type: object
                  require_ack:
                    description: RequireAck enables the acknowledgement feature.
                    type: boolean
                  retry_on_failure:
                    description: |-
                      BackOffConfig defines configuration for retrying batches in case of export failure.
                      The current supported strategy is exponential backoff.
                    properties:
                      initial_interval:
                        description: InitialInterval the time to wait after the first
                          failure before retrying.
                        format: int64
                        type: integer
                      max_elapsed_time:
                        description: |-
                          MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a request/batch.
                          Once this value is reached, the data is discarded. If set to 0, the retries are never stopped.
                          Default value is 0 to ensure that the data is never discarded.
                        format: int64
                        type: integer
                      max_interval:
                        description: |-
                          MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between
                          consecutive retries will always be `MaxInterval`.
                        format: int64
                        type: integer
                      multiplier:
                        description: Multiplier is the value multiplied by the backoff
                          interval bounds
                        type: string
                      randomization_factor:
                        description: |-
                          RandomizationFactor is a random factor used to calculate next backoffs
                          Randomized interval = RetryInterval * (1 ± RandomizationFactor)
                        type: string
                    type: object
                  sending_queue:
                    description: QueueSettings defines configuration for queueing
                      batches before sending to the consumerSender.
                    properties:
                      blocking:
                        description: |-
                          Blocking controls the queue behavior when full.
                          If true it blocks until enough space to add the new request to the queue.
                        type: boolean
                      num_consumers:
                        description: |-
                          NumConsumers is the number of consumers from the queue. Defaults to 10.
                          If batching is enabled, a combined batch cannot contain more requests than the number of consumers.
                          So it's recommended to set higher number of consumers if batching is enabled.
                        type: integer
                      queue_size:
                        description: |-
                          QueueSize is the maximum number of batches allowed in queue at a given time.
                          Default value is 100.
                        type: integer
                    type: object
                  shared_key:
                    description: SharedKey is used for authorization with the server
                      that knows it.
                    type: string
                  tag:
                    description: The Fluent tag parameter used for routing
                    type: string
                  tls:
                    description: TLSSetting struct exposes TLS client configuration.
                    properties:
                      ca_file:
                        description: |-
                          Path to the CA cert. For a client this verifies the server certificate.
                          For a server this verifies client certificates. If empty uses system root CA.
                          (optional)
                        type: string
                      ca_pem:
                        description: In memory PEM encoded cert. (optional)
                        type: string
                      cert_file:
                        description: Path to the TLS cert to use for TLS required
                          connections. (optional)
                        type: string
                      cert_pem:
                        description: In memory PEM encoded TLS cert to use for TLS
                          required connections. (optional)
                        type: string
                      cipher_suites:
                        description: |-
                          CipherSuites is a list of TLS cipher suites that the TLS transport can use.
                          If left blank, a safe default list is used.
                          See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.
                        items:
                          type: string
                        type: array
                      curve_preferences:
                        description: |-
                          contains the elliptic curves that will be used in
                          an ECDHE handshake, in preference order
                          Defaults to empty list and "crypto/tls" defaults are used, internally.
                        items:
                          type: string
                        type: array
                      include_system_ca_certs_pool:
                        description: |-
                          If true, load system CA certificates pool in addition to the certificates
                          configured in this struct.
                        type: boolean
                      insecure:
                        description: |-
                          In gRPC and HTTP when set to true, this is used to disable the client transport security.
                          See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC.
                          Please refer to https://godoc.org/crypto/tls#Config for more information.
                          (optional, default false)
                        type: boolean
                      insecure_skip_verify:
                        description: InsecureSkipVerify will enable TLS but not verify
                          the certificate.
                        type: boolean
                      key_file:
                        description: Path to the TLS key to use for TLS required connections.
                          (optional)
                        type: string
                      key_pem:
                        description: In memory PEM encoded TLS key to use for TLS
                          required connections. (optional)
                        type: string
                      max_version:
                        description: |-
                          MaxVersion sets the maximum TLS version that is acceptable.
                          If not set, refer to crypto/tls for defaults. (optional)
                        type: string
                      min_version:
                        description: |-
                          MinVersion sets the minimum TLS version that is acceptable.
                          If not set, TLS 1.2 will be used. (optional)
                        type: string
                      reload_interval:
                        description: |-
                          ReloadInterval specifies the duration after which the certificate will be reloaded
                          If not set, it will never be reloaded (optional)
                        format: int64
                        type: integer
                      server_name_override:
                        description: |-
                          ServerName requested by client for virtual hosting.
                          This sets the ServerName in the TLSConfig. Please refer to
                          https://godoc.org/crypto/tls#Config for more information. (optional)
                        type: string
                    type: object
                required:
                - endpoint
                type: object
              otlp:
                description: |-
                  Configuration for the OTLP gRPC exporter.
                  ref: https://github.com/open-telemetry/opentelemetry-collector/blob/main/exporter/otlpexporter/config.go
                properties:
                  auth:
                    description: Auth configuration for outgoing RPCs.
                    properties:
                      authenticator:
                        description: AuthenticatorID specifies the name of the extension
                          to use in order to authenticate the incoming data point.
                        type: string
                    type: object
                  authority:
                    description: |-
                      WithAuthority parameter configures client to rewrite ":authority" header
                      (godoc.org/google.golang.org/grpc#WithAuthority)
                    type: string
                  balancer_name:
                    description: |-
                      Sets the balancer in grpclb_policy to discover the servers. Default is pick_first.
                      https://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md
                    type: string
                  compression:
                    description: The compression key for supported compression types
                      within collector.
                    type: string
                  endpoint:
                    description: |-
                      The target to which the exporter is going to send traces or metrics,
                      using the gRPC protocol. The valid syntax is described at
                      https://github.com/grpc/grpc/blob/master/doc/naming.md.
                    type: string
                  headers:
                    additionalProperties:
                      type: string
                    description: The headers associated with gRPC requests.
                    type: object
                  keepalive:
                    description: |-
                      The keepalive parameters for gRPC client. See grpc.WithKeepaliveParams.
                      (https://godoc.org/google.golang.org/grpc#WithKeepaliveParams).
                    properties:
                      permit_without_stream:
                        type: boolean
                      time:
                        description: |-
                          A Duration represents the elapsed time between two instants
                          as an int64 nanosecond count. The representation limits the
                          largest representable duration to approximately 290 years.
                        format: int64
                        type: integer
                      timeout:
                        description: |-
                          A Duration represents the elapsed time between two instants
                          as an int64 nanosecond count. The representation limits the
                          largest representable duration to approximately 290 years.
                        format: int64
                        type: integer
                    type: object
                  read_buffer_size:
                    description: |-
                      ReadBufferSize for gRPC client. See grpc.WithReadBufferSize.
                      (https://godoc.org/google.golang.org/grpc#WithReadBufferSize).
                    type: integer
                  retry_on_failure:
                    description: |-
                      BackOffConfig defines configuration for retrying batches in case of export failure.
                      The current supported strategy is exponential backoff.
                    properties:
                      initial_interval:
                        description: InitialInterval the time to wait after the first
                          failure before retrying.
                        format: int64
                        type: integer
                      max_elapsed_time:
                        description: |-
                          MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a request/batch.
                          Once this value is reached, the data is discarded. If set to 0, the retries are never stopped.
                          Default value is 0 to ensure that the data is never discarded.
                        format: int64
                        type: integer
                      max_interval:
                        description: |-
                          MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between
                          consecutive retries will always be `MaxInterval`.
                        format: int64
                        type: integer
                      multiplier:
                        description: Multiplier is the value multiplied by the backoff
                          interval bounds
                        type: string
                      randomization_factor:
                        description: |-
                          RandomizationFactor is a random factor used to calculate next backoffs
                          Randomized interval = RetryInterval * (1 ± RandomizationFactor)
                        type: string
                    type: object
                  sending_queue:
                    description: QueueSettings defines configuration for queueing
                      batches before sending to the consumerSender.
                    properties:
                      blocking:
                        description: |-
                          Blocking controls the queue behavior when full.
                          If true it blocks until enough space to add the new request to the queue.
                        type: boolean
                      num_consumers:
                        description: |-
                          NumConsumers is the number of consumers from the queue. Defaults to 10.
                          If batching is enabled, a combined batch cannot contain more requests than the number of consumers.
                          So it's recommended to set higher number of consumers if batching is enabled.
                        type: integer
                      queue_size:
                        description: |-
                          QueueSize is the maximum number of batches allowed in queue at a given time.
                          Default value is 100.
                        type: integer
                    type: object
                  timeout:
                    description: |-
                      Timeout is the timeout for every attempt to send data to the backend.
                      A zero timeout means no timeout.
                    format: int64
                    type: integer
                  tls:
                    description: TLSSetting struct exposes TLS client configuration.
                    properties:
                      ca_file:
                        description: |-
                          Path to the CA cert. For a client this verifies the server certificate.
                          For a server this verifies client certificates. If empty uses system root CA.
                          (optional)
                        type: string
                      ca_pem:
                        description: In memory PEM encoded cert. (optional)
                        type: string
                      cert_file:
                        description: Path to the TLS cert to use for TLS required
                          connections. (optional)
                        type: string
                      cert_pem:
                        description: In memory PEM encoded TLS cert to use for TLS
                          required connections. (optional)
                        type: string
                      cipher_suites:
                        description: |-
                          CipherSuites is a list of TLS cipher suites that the TLS transport can use.
                          If left blank, a safe default list is used.
                          See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.
                        items:
                          type: string
                        type: array
                      curve_preferences:
                        description: |-
                          contains the elliptic curves that will be used in
                          an ECDHE handshake, in preference order
                          Defaults to empty list and "crypto/tls" defaults are used, internally.
                        items:
                          type: string
                        type: array
                      include_system_ca_certs_pool:
                        description: |-
                          If true, load system CA certificates pool in addition to the certificates
                          configured in this struct.
                        type: boolean
                      insecure:
                        description: |-
                          In gRPC and HTTP when set to true, this is used to disable the client transport security.
                          See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC.
                          Please refer to https://godoc.org/crypto/tls#Config for more information.
                          (optional, default false)
                        type: boolean
                      insecure_skip_verify:
                        description: InsecureSkipVerify will enable TLS but not verify
                          the certificate.
                        type: boolean
                      key_file:
                        description: Path to the TLS key to use for TLS required connections.
                          (optional)
                        type: string
                      key_pem:
                        description: In memory PEM encoded TLS key to use for TLS
                          required connections. (optional)
                        type: string
                      max_version:
                        description: |-
                          MaxVersion sets the maximum TLS version that is acceptable.
                          If not set, refer to crypto/tls for defaults. (optional)
                        type: string
                      min_version:
                        description: |-
                          MinVersion sets the minimum TLS version that is acceptable.
                          If not set, TLS 1.2 will be used. (optional)
                        type: string
                      reload_interval:
                        description: |-
                          ReloadInterval specifies the duration after which the certificate will be reloaded
                          If not set, it will never be reloaded (optional)
                        format: int64
                        type: integer
                      server_name_override:
                        description: |-
                          ServerName requested by client for virtual hosting.
                          This sets the ServerName in the TLSConfig. Please refer to
                          https://godoc.org/crypto/tls#Config for more information. (optional)
                        type: string
                    type: object
                  wait_for_ready:
                    description: |-
                      WaitForReady parameter configures client to wait for ready state before sending data.
                      (https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md)
                    type: boolean
                  write_buffer_size:
                    description: |-
                      WriteBufferSize for gRPC gRPC. See grpc.WithWriteBufferSize.
                      (https://godoc.org/google.golang.org/grpc#WithWriteBufferSize).
                    type: integer
                required:
                - endpoint
                type: object
              otlphttp:
                description: Configuration for the OTLP HTTP exporter.
                properties:
                  auth:
                    description: Auth configuration for outgoing HTTP calls.
                    properties:
                      authenticator:
                        description: AuthenticatorID specifies the name of the extension
                          to use in order to authenticate the incoming data point.
                        type: string
                    type: object
                  compression:
                    description: The compression key for supported compression types
                      within collector.
                    type: string
                  compression_params:
                    description: Advanced configuration options for the Compression
                    properties:
                      level:
                        type: integer
                    type: object
                  cookies:
                    description: Cookies configures the cookie management of the HTTP
                      client.
                    properties:
                      enabled:
                        description: Enabled if true, cookies from HTTP responses
                          will be reused in further HTTP requests with the same server.
                        type: boolean
                    type: object
                  disable_keep_alives:
                    description: |-
                      DisableKeepAlives, if true, disables HTTP keep-alives and will only use the connection to the server
                      for a single HTTP request.

                      WARNING: enabling this option can result in significant overhead establishing a new HTTP(S)
                      connection for every request. Before enabling this option please consider whether changes
                      to idle connection settings can achieve your goal.
                    type: boolean
                  encoding:
                    description: 'The encoding to export telemetry (default: "proto")'
                    enum:
                    - proto
                    - json
                    type: string
                  endpoint:
                    description: 'The target URL to send data to (e.g.: http://some.url:9411/v1/traces).'
                    type: string
                  headers:
                    additionalProperties:
                      type: string
                    description: |-
                      Additional headers attached to each HTTP request sent by the client.
                      Existing header values are overwritten if collision happens.
                      Header values are opaque since they may be sensitive.
                    type: object
                  http2_ping_timeout:
                    description: |-
                      HTTP2PingTimeout if there's no response to the ping within the configured value, the connection will be closed.
                      If not set or set to 0, it defaults to 15s.
                    format: int64
                    type: integer
                  http2_read_idle_timeout:
                    description: |-
                      This is needed in case you run into
                      https://github.com/golang/go/issues/59690
                      https://github.com/golang/go/issues/36026
                      HTTP2ReadIdleTimeout if the connection has been idle for the configured value send a ping frame for health check
                      0s means no health check will be performed.
                    format: int64
                    type: integer
                  idle_conn_timeout:
                    description: |-
                      IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.
                      By default, it is set to [http.DefaultTransport.IdleConnTimeout]
                    format: int64
                    type: integer
                  max_conns_per_host:
                    description: |-
                      MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,
                      active, and idle states.
                      By default, it is set to [http.DefaultTransport.MaxConnsPerHost].
                    type: integer
                  max_idle_conns:
                    description: |-
                      MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.
                      By default, it is set to 100.
                    type: integer
                  max_idle_conns_per_host:
                    description: |-
                      MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.
                      By default, it is set to [http.DefaultTransport.MaxIdleConnsPerHost].
                    type: integer
                  proxy_url:
                    description: ProxyURL setting for the collector
                    type: string
                  read_buffer_size:
                    description: |-
                      ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.
                      Default is 0.
                    type: integer
                  retry_on_failure:
                    description: |-
                      BackOffConfig defines configuration for retrying batches in case of export failure.
                      The current supported strategy is exponential backoff.
                    properties:
                      initial_interval:
                        description: InitialInterval the time to wait after the first
                          failure before retrying.
                        format: int64
                        type: integer
                      max_elapsed_time:
                        description: |-
                          MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a request/batch.
                          Once this value is reached, the data is discarded. If set to 0, the retries are never stopped.
                          Default value is 0 to ensure that the data is never discarded.
                        format: int64
                        type: integer
                      max_interval:
                        description: |-
                          MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between
                          consecutive retries will always be `MaxInterval`.
                        format: int64
                        type: integer
                      multiplier:
                        description: Multiplier is the value multiplied by the backoff
                          interval bounds
                        type: string
                      randomization_factor:
                        description: |-
                          RandomizationFactor is a random factor used to calculate next backoffs
                          Randomized interval = RetryInterval * (1 ± RandomizationFactor)
                        type: string
                    type: object
                  sending_queue:
                    description: QueueSettings defines configuration for queueing
                      batches before sending to the consumerSender.
                    properties:
                      blocking:
                        description: |-
                          Blocking controls the queue behavior when full.
                          If true it blocks until enough space to add the new request to the queue.
                        type: boolean
                      num_consumers:
                        description: |-
                          NumConsumers is the number of consumers from the queue. Defaults to 10.
                          If batching is enabled, a combined batch cannot contain more requests than the number of consumers.
                          So it's recommended to set higher number of consumers if batching is enabled.
                        type: integer
                      queue_size:
                        description: |-
                          QueueSize is the maximum number of batches allowed in queue at a given time.
                          Default value is 100.
                        type: integer
                    type: object
                  timeout:
                    description: |-
                      Timeout parameter configures `http.Client.Timeout`.
                      Default is 0 (unlimited).
                    format: int64
                    type: integer
                  tls:
                    description: TLSSetting struct exposes TLS client configuration.
                    properties:
                      ca_file:
                        description: |-
                          Path to the CA cert. For a client this verifies the server certificate.
                          For a server this verifies client certificates. If empty uses system root CA.
                          (optional)
                        type: string
                      ca_pem:
                        description: In memory PEM encoded cert. (optional)
                        type: string
                      cert_file:
                        description: Path to the TLS cert to use for TLS required
                          connections. (optional)
                        type: string
                      cert_pem:
                        description: In memory PEM encoded TLS cert to use for TLS
                          required connections. (optional)
                        type: string
                      cipher_suites:
                        description: |-
                          CipherSuites is a list of TLS cipher suites that the TLS transport can use.
                          If left blank, a safe default list is used.
                          See https://go.dev/src/crypto/tls/cipher_suites.go for a list of supported cipher suites.
                        items:
                          type: string
                        type: array
                      curve_preferences:
                        description: |-
                          contains the elliptic curves that will be used in
                          an ECDHE handshake, in preference order
                          Defaults to empty list and "crypto/tls" defaults are used, internally.
                        items:
                          type: string
                        type: array
                      include_system_ca_certs_pool:
                        description: |-
                          If true, load system CA certificates pool in addition to the certificates
                          configured in this struct.
                        type: boolean
                      insecure:
                        description: |-
                          In gRPC and HTTP when set to true, this is used to disable the client transport security.
                          See https://godoc.org/google.golang.org/grpc#WithInsecure for gRPC.
                          Please refer to https://godoc.org/crypto/tls#Config for more information.
                          (optional, default false)
                        type: boolean
                      insecure_skip_verify:
                        description: InsecureSkipVerify will enable TLS but not verify
                          the certificate.
                        type: boolean
                      key_file:
                        description: Path to the TLS key to use for TLS required connections.
                          (optional)
                        type: string
                      key_pem:
                        description: In memory PEM encoded TLS key to use for TLS
                          required connections. (optional)
                        type: string
                      max_version:
                        description: |-
                          MaxVersion sets the maximum TLS version that is acceptable.
                          If not set, refer to crypto/tls for defaults. (optional)
                        type: string
                      min_version:
                        description: |-
                          MinVersion sets the minimum TLS version that is acceptable.
                          If not set, TLS 1.2 will be used. (optional)
                        type: string
                      reload_interval:
                        description: |-
                          ReloadInterval specifies the duration after which the certificate will be reloaded
                          If not set, it will never be reloaded (optional)
                        format: int64
                        type: integer
                      server_name_override:
                        description: |-
                          ServerName requested by client for virtual hosting.
                          This sets the ServerName in the TLSConfig. Please refer to
                          https://godoc.org/crypto/tls#Config for more information. (optional)
                        type: string
                    type: object
                  write_buffer_size:
                    description: |-
                      WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.
                      Default is 0.
                    type: integer
                type: object
            type: object
          status:
            description: OutputStatus defines the observed state of Output
            properties:
              state:
                type: string
              tenant:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
